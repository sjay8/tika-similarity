<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stacked Area Chart</title>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <style>
       
        svg {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <div id="chart"></div>
    <script>
        // JavaScript code for the stacked area chart
        // defining  chart dimensions and margins
        const width = 928;
        const height = 500;
        const marginTop = 10;
        const marginRight = 10;
        const marginBottom = 20;
        const marginLeft = 40;

        // Function to create the stacked area chart
        function createStackedAreaChart(data) {
                    
            // figure out which series  need to be stacked.
            const series = d3.stack()
                .keys(d3.union(data.map(d => d.industry))) // distinct series keys, in input order
                .value(([, D], key) => D.get(key).unemployed) // get value for each series key and stack
                (d3.index(data, d => d.date, d => d.industry)); // group by stack then series key

            // generate positional scale and color scale.
            const x = d3.scaleUtc()
                .domain(d3.extent(data, d => d.date))
                .range([marginLeft, width - marginRight]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(series, d => d3.max(d, d => d[1]))])
                .rangeRound([height - marginBottom, marginTop]);

            const color = d3.scaleOrdinal()
                .domain(series.map(d => d.key))
                .range(d3.schemeTableau10);

            // generate area shape 
            const area = d3.area()
                .x(d => x(d.data[0]))
                .y0(d => y(d[0]))
                .y1(d => y(d[1]));

            // create the SVG container
            const svg = d3.create("svg")
                .attr("width", width)
                .attr("height", height)
                .attr("viewBox", [0, 0, width, height])
                .attr("style", "max-width: 100%; height: auto;");

            // dd the y-axis, remove the domain line, add grid lines and a label.
            svg.append("g")
                .attr("transform", `translate(${marginLeft},0)`)
                .call(d3.axisLeft(y).ticks(height / 80))
                .call(g => g.select(".domain").remove())
                .call(g => g.selectAll(".tick line").clone()
                    .attr("x2", width - marginLeft - marginRight)
                    .attr("stroke-opacity", 0.1))
                .call(g => g.append("text")
                    .attr("x", -marginLeft)
                    .attr("y", 10)
                    .attr("fill", "currentColor")
                    .attr("text-anchor", "start")
                    .text("â†‘ Unemployed persons"));

            // append a path for each series.
            svg.append("g")
                .selectAll()
                .data(series)
                .join("path")
                .attr("fill", d => color(d.key))
                .attr("d", area)
                .append("title")
                .text(d => d.key);

            // append the horizontal axis atop the area.
            svg.append("g")
                .attr("transform", `translate(0,${height - marginBottom})`)
                .call(d3.axisBottom(x).tickSizeOuter(0));

            // return the chart with the color scale as a property 
            return Object.assign(svg.node(), { scales: { color } });

        }

        // get data and create the chart
        d3.json("data.json").then(data => {
            const chartNode = createStackedAreaChart(data);
            document.getElementById("chart").appendChild(chartNode);
        }).catch(error => {
            console.error("Error loading data:", error);
        });
    </script>
</body>
</html>
